/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _UKPolice_UKPolice_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UKPolice/UKPolice.mjs */ \"./src/UKPolice/UKPolice.mjs\");\n\n\n\n// global declarations\nconst police = new _UKPolice_UKPolice_mjs__WEBPACK_IMPORTED_MODULE_0__.UKPolice();\n\nvar mymap = L.map('mapid', {zoomControl: false}).setView([51.505, -0.09], 7);\n\nvar tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                maxZoom: 19,\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            }).addTo(mymap);\n\nL.control.zoom({position: \"bottomleft\"}).addTo(mymap);\nL.control.scale({position: \"bottomright\"}).addTo(mymap);\n\nvar neighbourhoodPolygon = L.polygon([], {\n    stroke: true,\n    color: '#EC5630',\n    opacity: 0.6,\n    fill: true,\n    fillOpacity: 0.2\n});\n\nvar markers = L.layerGroup([], {\n    attribution: 'Data comes from <a href=\"https://data.police.uk/\">police.uk</a>'\n}).addTo(mymap);\n\nvar category = document.getElementById('mapCrimeCategory');\nvar forceSelect = document.getElementById('mapForce');\nvar neighbourhood = document.getElementById('mapNeighbourhood');\n\nvar priorities = document.getElementById('priorities');\n\nvar localTeam = document.getElementById('team');\n\nvar userLocation = window.navigator.geolocation;\n\n\n\n\n\n// after load\nsetSelects();\n\nuserLocation.getCurrentPosition(\n    function(pos) {\n        let latitude = Number.parseFloat(pos.coords.latitude).toFixed(2);\n        let longitude = Number.parseFloat(pos.coords.longitude).toFixed(2);\n\n        mymap.setView([latitude, longitude]);\n        mymap.fireEvent(\n            'click',\n            {\n                latlng: {\n                    lat: latitude,\n                    lng: longitude\n                }\n            });\n    }\n);\n\n\n\n\n\n\n\n// event listeners\nmymap\n    .addEventListener(\n        'moveend', \n        event => {\n            let coords = mymap.getCenter();\n            \n            police.crimesHere(\n                category.value,\n                [coords.lat, coords.lng],\n                response => {\n                    setMarkers(response);\n                }\n        );\n        \n    });\nmymap\n    .addEventListener(\n        'click',\n        event => {\n            police.locate(\n                [event.latlng.lat, event.latlng.lng],\n                response => {\n                    if(response != 'Not Found') {\n                        setBoundary(\n                            response.force, \n                            response.neighbourhood\n                            );\n\n                        forceSelect.value = response.force;\n\n                        setNeighbourhoods(\n                            response.force, \n                            response.neighbourhood\n                            );\n                    }\n                }\n            )\n        });\n\nforceSelect\n    .addEventListener(\n        'change',\n        event => {\n            setNeighbourhoods(event.target.value);\n    });\n\nneighbourhood\n    .addEventListener(\n        'change',\n        event => {\n            setBoundary(forceSelect.value, event.target.value);\n            setPriorities(forceSelect.value, event.target.value);\n            setTeam(forceSelect.value, event.target.value);\n    });\ncategory\n    .addEventListener(\n      'change',\n      event => {\n          mymap.fireEvent('moveend');\n      }  \n    );\n\n\n\n\n\n\n\n\n// functions\n\nfunction setSelects() {\n    police.categories((response) => {\n        setOptions('mapCrimeCategory', response);\n    });\n    police.forces((response) => {\n        setOptions('mapForce', response);\n        setNeighbourhoods(response[0].id);\n    });\n}\nfunction setNeighbourhoods(id, selectOption = false) {\n    police.neighbourhoods(id, (response) => {\n        clearChildren('mapNeighbourhood');\n        setOptions('mapNeighbourhood', response);\n        \n        let forceId = forceSelect.value;\n        if(!selectOption) {\n            setBoundary(forceId, response[0].id);\n        } else {\n            neighbourhood.value = selectOption;\n        }\n\n        setPriorities(forceId, selectOption || response[0].id);\n        setTeam(forceId, selectOption || response[0].id);\n    });\n}\n\nfunction setMarkers(data) {\n    markers.clearLayers();\n\n    if(Array.isArray(data)) {\n        data.forEach(element => {\n            let options = {\n                title: police.crimeCategories[element.category],\n                riseOnHover: true,\n            };\n\n            let latlng = [];\n            if(element.location) {\n                latlng.push(element.location.latitude);\n                latlng.push(element.location.longitude);\n            } else return;\n    \n            let marker = L.marker(\n                latlng,\n                options\n            );\n            markers.addLayer(marker);\n        });\n    }\n}\n\nfunction setBoundary(forceId, neighbourhoodId) {\n    police.boundary(\n        forceId, \n        neighbourhoodId, \n        response => {\n            // conversion to Leaflet's LatLng array\n            let array = [];\n            response.forEach(point => {\n                array.push([point.latitude, point.longitude])\n            });\n\n            neighbourhoodPolygon.setLatLngs(array).addTo(mymap);\n            mymap.fitBounds(\n                neighbourhoodPolygon.getBounds(),\n                {\n                    animate: true,\n                    duration: 4,\n                    easeLinearity: 1\n                }\n                );\n        });\n}\n\nfunction setPriorities(forceId, neighbourhoodId) {\n    police.priorities(\n        forceId,\n        neighbourhoodId,\n        response => {\n            clearChildren('priorities');\n\n            response.forEach(priority => {\n                var text = priority.issue;\n                text += priority.action ? priority.action : '';\n\n                text += '<p>Created: ' \n                    + new Date(priority['issue-date']).toDateString()\n                    + '</p>';\n\n                text += priority['action-date'] ? \n                    ('<p>Actioned: ' \n                        + new Date(priority['action-date']).toDateString()\n                        + '</p>') :\n                    '';\n\n                var item = document.createElement('li');\n                item.innerHTML = text;\n\n                priorities.append(item);\n            })\n        }\n    )\n}\n\nfunction setTeam(forceId, neighbourhoodId) {\n    police.localTeam(\n        forceId,\n        neighbourhoodId,\n        response => {\n            clearChildren('team');\n\n            response.forEach(officer => {\n                var text = `<p>${officer.rank} ${officer.name}</p>`;\n                text += officer.bio ? officer.bio : '<p>Biography not available.</p>';\n                \n\n                var item = document.createElement('li');\n                item.innerHTML = text;\n\n                localTeam.append(item);\n            })\n        }\n    )\n}\n\nfunction setOptions(selectId, arrayOfValues) {\n    var select = document.getElementById(selectId);\n\n    arrayOfValues.forEach(value => {\n        let option = document.createElement('option');\n        option.value = value.url || value.id;\n        option.innerText = value.name;\n\n        select.append(option);\n    });\n    \n    if(select.firstChild) select.firstChild.selected = true;\n}\nfunction clearChildren(id) {\n    var node = document.getElementById(id);\n\n    while(node.firstChild) node.removeChild(node.lastChild);\n}\n\n//# sourceURL=webpack://uk-police-data-handler/./src/index.js?");

/***/ }),

/***/ "./src/UKPolice/PoliceURL.mjs":
/*!************************************!*\
  !*** ./src/UKPolice/PoliceURL.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PoliceURL\": () => (/* binding */ PoliceURL)\n/* harmony export */ });\n/* harmony import */ var _UsesFetch_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UsesFetch.mjs */ \"./src/UKPolice/UsesFetch.mjs\");\n\n\nclass PoliceURL extends _UsesFetch_mjs__WEBPACK_IMPORTED_MODULE_0__.UsesFetch {\n    constructor(props) {\n        super(props);\n    }\n\n    baseURL = 'https://data.police.uk/api/';\n    urls = {\n        forces() {\n            return this.baseURL + 'forces';\n        },\n        neighbourhoods(forceId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            return this.baseURL + `${forceId}/neighbourhoods`;\n        },\n        force(forceId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            return this.baseURL + `forces/${forceId}`;\n        },\n        neighbourhood(forceId, neighbourhoodId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            if(!neighbourhoodId) throw new Error('Missing Argument')\n\n            return this.baseURL + `${forceId}/${neighbourhoodId}`;\n        },\n        officers(forceId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            return this.baseURL + `forces/${forceId}/people`;\n        },\n        crimesAtPoint(category, coords, date) {\n            if(!category) throw new Error('Missing Argument');\n\n            if(!coords) throw new Error('Missing Argument')\n            else if(!Array.isArray(coords)) throw new Error('Bad Argument');\n\n            return this.baseURL + \n                `crimes-street/${category}${this.queryString(\n                    ['coords', 'date'], \n                    [coords, date])}`;\n        },\n        outcomesAround(coords, date = this.lastUpdated) {\n            if(!coords) throw new Error('Missing Argument')\n            else if(!Array.isArray(coords)) throw new Error('Bad Argument');\n\n            return this.baseURL + \n                `outcomes-at-location` +\n                this.queryString(['coords', 'date'], [coords, date]);\n        },\n        outcomesAtLocation(locationId, date = this.lastUpdated) {\n            if(!locationId) throw new Error('Missing Argument')\n            else if(!Number.isInteger(locationId)) throw new Error('Bad Argument');\n\n            return this.baseURL + \n                `outcomes-at-location` +\n                this.queryString(['location', 'date'], [locationId, date]);\n        },\n        outcomeForCrime(crimeId) {\n            if(!crimeId) throw new Error('Missing Argument')\n            else if(`${crimeId}`.length != 64) throw new Error('Bad Argument');\n\n            return this.baseURL + `outcomes-for-crime/${crimeId}`;\n        },\n        crimesAtLocation(locationId, date = this.lastUpdated) {\n            if(!locationId) throw new Error('Missing Argument')\n            else if(!Number.isInteger(locationId)) throw new Error('Bad Argument');\n\n            return this.baseURL + \n                `crimes-at-location` +\n                this.queryString(['location', 'date'], [locationId, date]);\n        },\n        crimesAround(coords, date = this.lastUpdated) {\n            if(!coords) throw new Error('Missing Argument')\n            else if(!Array.isArray(coords)) throw new Error('Bad Argument');\n\n            return this.baseURL + \n                `crimes-at-location` +\n                this.queryString(['coords', 'date'], [coords, date]);\n        },\n        crimesNoLocation(category, forceId, date = this.lastUpdated) {\n            if(!category) throw new Error('Missing Argument');\n\n            if(!forceId) throw new Error('Missing Argument');\n\n            return this.baseURL + 'crimes-no-location' +\n                this.queryString(\n                    ['category', 'force', 'date'],\n                    [category, forceId, date]\n                    );\n        },\n        crimeCategories(date = this.lastUpdated) {\n            return this.baseURL + `crime-categories${this.queryString(['date'], [date])}`\n        },\n        lastUpdated() {\n            return this.baseURL + 'crime-last-updated';\n        },\n        boundary(forceId, neighbourhoodId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            if(!neighbourhoodId) throw new Error('Missing Argument');\n\n            return this.baseURL + `${forceId}/${neighbourhoodId}/boundary`;\n        },\n        locate(coords) {\n            if(!coords) throw new Error('Missing Argument');\n\n            return this.baseURL + \n                `locate-neighbourhood?q=${coords[0]},${coords[1]}`;\n\n        },\n        priorities(forceId, neighbourhoodId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            if(!neighbourhoodId) throw new Error('Missing Argument')\n\n            return this.baseURL + `${forceId}/${neighbourhoodId}/priorities`;\n        },\n        localTeam(forceId, neighbourhoodId) {\n            if(!forceId) throw new Error('Missing Argument');\n\n            if(!neighbourhoodId) throw new Error('Missing Argument');\n\n            return this.baseURL + `${forceId}/${neighbourhoodId}/people`;\n        }\n\n    }\n\n    crimeCategories = null;\n    lastUpdated = '';\n\n    queryString(keys, values) {\n        if(!keys || !values) throw new Error('Missing Argument')\n        else if(!Array.isArray(keys) \n            || !Array.isArray(values)) throw new Error('Bad Argument');\n\n        \n        let query = '?';\n        for(let i = 0; i < values.length; i++) {\n            switch(keys[i]) {\n                case 'category':\n                    query += `category=${values[i]}&`;\n                    break;\n                case 'force':\n                    query += `force=${values[i]}&`;\n                    break;\n                case 'location':\n                    query += `location_id=${values[i]}&`\n                    break;\n                case 'coords':\n                    query += `lat=${values[i][0]}&lng=${values[i][1]}&`;\n                    break;\n                case 'date': // optional \n                    if(values[i]) {\n                        let d = new Date(values[i]);\n                        if(d.valueOf()) {\n                            let month = d.getMonth() >= 9 ? d.getMonth() + 1 : `0${d.getMonth() + 1}`;\n                            query += `date=${d.getFullYear()}-${month}&`;\n                        }\n                    }\n                    break;\n                case 'poly':\n                    let points = '';\n\n                    let polygon = values[i];\n\n                    if(Array.isArray(polygon)) {\n                        polygon.forEach(point => {\n                            if(Array.isArray(point)) {\n                                points += `${point[0]},${point[1]}:`;\n                            }\n                        });\n                    }\n\n                    points = points.substring(0, points.length - 1);\n\n                    if(points.length > 3000) throw new Error('Too long polygon. Use POST request.');\n                    query += points ? `poly=${points}&` : '';\n                    break;\n            } \n        }\n\n        return query.substring(0, query.length - 1);\n    }\n}\n\n//# sourceURL=webpack://uk-police-data-handler/./src/UKPolice/PoliceURL.mjs?");

/***/ }),

/***/ "./src/UKPolice/UKPolice.mjs":
/*!***********************************!*\
  !*** ./src/UKPolice/UKPolice.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UKPolice\": () => (/* binding */ UKPolice)\n/* harmony export */ });\n/* harmony import */ var _PoliceURL_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PoliceURL.mjs */ \"./src/UKPolice/PoliceURL.mjs\");\n\n\nclass UKPolice extends _PoliceURL_mjs__WEBPACK_IMPORTED_MODULE_0__.PoliceURL {\n    constructor(props) {\n        super(props);\n\n        this.urls.forces = this.urls.forces.bind(this);\n        this.urls.neighbourhoods = this.urls.neighbourhoods.bind(this);\n        this.urls.force = this.urls.force.bind(this);\n        this.urls.neighbourhood = this.urls.neighbourhood.bind(this);\n        this.urls.officers = this.urls.officers.bind(this);\n        this.urls.crimesAtPoint = this.urls.crimesAtPoint.bind(this);\n        this.urls.outcomesAround = this.urls.outcomesAround.bind(this);\n        this.urls.outcomesAtLocation = this.urls.outcomesAtLocation.bind(this);\n        this.urls.outcomeForCrime = this.urls.outcomeForCrime.bind(this);\n        this.urls.crimesAtLocation = this.urls.crimesAtLocation.bind(this);\n        this.urls.crimesAround = this.urls.crimesAround.bind(this);\n        this.urls.crimesNoLocation = this.urls.crimesNoLocation.bind(this);\n        this.urls.crimeCategories = this.urls.crimeCategories.bind(this);\n        this.urls.lastUpdated = this.urls.lastUpdated.bind(this);\n        this.urls.boundary = this.urls.boundary.bind(this);\n        this.urls.locate = this.urls.locate.bind(this);\n        this.urls.priorities = this.urls.priorities.bind(this);\n        this.urls.localTeam = this.urls.localTeam.bind(this);\n    }\n\n\n\n    // forces, teams\n    forces(callbackFunction) {\n        this.get(\n            this.urls.forces(), \n            callbackFunction\n        );\n\n        this.__setLastUpdated();\n        this.__setCategories();\n    }\n    \n    neighbourhoods(forceId, callbackFunction) {\n        this.get(\n            this.urls.neighbourhoods(forceId), \n            callbackFunction\n        );\n\n        this.__setLastUpdated();\n        this.__setCategories();\n    }\n\n    force(forceId, callbackFunction) {\n        this.__setForces();\n        \n        this.get(\n            this.urls.force(forceId), \n            callbackFunction\n        );\n    }\n\n    neighbourhood(forceId, neighbourhoodId, callbackFunction) {\n        this.get(\n            this.urls.neighbourhood(forceId, neighbourhoodId),\n            callbackFunction\n        );\n    }\n\n    boundary(forceId, neighbourhoodId, callbackFunction) {\n        this.get(\n            this.urls.boundary(forceId, neighbourhoodId),\n            callbackFunction\n        );\n    }\n\n    locate(coordinates, callbackFunction) {\n        this.get(\n            this.urls.locate(coordinates),\n            callbackFunction\n        );\n    }\n\n    // crimes\n    __setCategories() {\n        if(!this.crimeCategories) {\n            this.crimeCategories = {};\n            this.get(\n                this.urls.crimeCategories(),\n                response => {\n                    response.forEach(category => {\n                        Object.assign(this.crimeCategories, {\n                            [category.url]: category.name\n                        });\n                    });\n                }\n            );\n        }\n    }\n    categories(callbackFunction, date = this.lastUpdated) {\n        this.get(\n            this.urls.crimeCategories(date),\n            callbackFunction\n        );\n\n        this.__setLastUpdated();\n        this.__setCategories();\n    }\n    crimesHere(category, coords, callbackFunction) {\n        this.get(\n            this.urls.crimesAtPoint(category, coords),\n            callbackFunction\n        );\n    }\n\n    // people\n    localTeam(forceId, neighbourhoodId, callbackFunction) {\n        this.get(\n            this.urls.localTeam(forceId, neighbourhoodId),\n            callbackFunction\n        );\n    }\n\n    // priorities\n    priorities(forceId, neighbourhoodId, callbackFunction) {\n        this.get(\n            this.urls.priorities(forceId, neighbourhoodId),\n            callbackFunction\n        );\n    }\n\n    // date\n    __setLastUpdated() {\n        if(!this.lastUpdated) {\n            this.get(this.urls.lastUpdated(), (response) => {\n                let d = new Date(response.date);\n                if(d.valueOf()) {\n                    let month = d.getMonth() >= 9 ? d.getMonth() + 1 : `0${d.getMonth() + 1}`;\n                    this.lastUpdated = `${d.getFullYear()}-${month}`;\n                }\n            });\n        }\n        \n    }\n\n\n}\n\n//# sourceURL=webpack://uk-police-data-handler/./src/UKPolice/UKPolice.mjs?");

/***/ }),

/***/ "./src/UKPolice/UsesFetch.mjs":
/*!************************************!*\
  !*** ./src/UKPolice/UsesFetch.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UsesFetch\": () => (/* binding */ UsesFetch)\n/* harmony export */ });\nclass UsesFetch {\n    setRequestBody(data) {\n        this.init.body = JSON.stringify(data);\n    }\n\n    get(url, callback) {\n        let init = null;\n        if(this.init === {}) {\n            init = Object.assign({}, this.__init, this.init);\n        }\n        \n        this.init = {};\n        this.sendRequest(url, init, callback);\n    }\n    \n    async sendRequest(url, init, callback) {\n        fetch(url, init)\n            .then(function(response) {\n                if(!response.ok) {\n                    throw new Error('HTTP ERROR: ' + response.status);\n                }\n                return response.json();\n            })\n            .then((response) => {\n                callback(this.handleResponse(response));\n            });\n    }\n\n    handleResponse(response) {\n        return response ? response : 'No results.';\n    }\n\n    __init = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: ''\n    }\n    init = {};\n\n    get init() {\n        console.log()\n        return Object.assign({}, this.__init, this.init);\n    }\n    set init(newInitObject) {\n        this.init = newInitObject == false ? this.init.merge(newInitObject) : {};\n    }\n\n}\n\n//# sourceURL=webpack://uk-police-data-handler/./src/UKPolice/UsesFetch.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;